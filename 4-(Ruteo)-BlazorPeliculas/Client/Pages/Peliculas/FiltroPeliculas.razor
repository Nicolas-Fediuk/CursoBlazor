@page "/peliculas/buscar"
@inject IRepositorio repositorio
@inject NavigationManager navigationManager

<h3>Filtro peliculas</h3>

@*no hace falta usar un editForm para hacer un formulario*@
<div class="row g-3 align-items-center mb-3">
    <div class="col-sm-3">
        <input typeof="text" class="form-control" id="titulo" placeholder="Titulo pelicula"
        @bind-value = "titulo" @bind-value:event="oninput"
        @onkeypress="@((KeyboardEventArgs e) => TituloKeyPress(e))"/>
        
    </div>
    <div class="col-sm-3">
        <select class="form-select" @bind="GeneroSeleccionado">
            <option value="0">--Seleccione un genero--</option>
            @foreach(var item in generos)
            {
                <option value="@item.Id">@item.Nombre</option>
            }
        </select>
    </div>
    <div class="col-sm-6" style="display:flex;">
        <div class="form-check me-2">
            <input type="checkbox" class="form-check-input" id="estrenos" @bind="futurosEstrenos" />
            <label class="form-check-label" for="estrenos">Futuros estrenos</label>
        </div>
        <div class="form-check me-2">
            <input type="checkbox" class="form-check-input" id="cartelera" @bind="enCartelera" />
            <label class="form-check-label" for="cartelera">En cartelera</label>
        </div>
        <div class="form-check">
            <input type="checkbox" class="form-check-input" id="masVotadas" @bind="masVotadas" />
            <label class="form-check-label" for="masVotadas">Mas votadas</label>
        </div>
    </div>
    <div>
        <div class="col-12">
            <button type="button" class="btn btn-primary" @onclick="CargarNuevasPeliculas">Filtrar</button>
            <button type="button" class="btn btn-danger" @onclick="LimparOnClick">Limpiar</button>
        </div>
    </div>
</div>

<Paginacion PaginaActual="paginaActual" PaginaSeleccionada="PaginaSeleccionada" PaginasTotales="paginasTotales"></Paginacion>

<ListadoPelicula peliculas="peliculas"></ListadoPelicula>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string titulo { get; set; } = "";

    [Parameter]
    // para que el parametro venga de una url
    [SupplyParameterFromQuery(Name = "generoid")]
    public int GeneroSeleccionado { get; set; }

    private List<Genero> generos = new List<Genero>();

    [Parameter]
    [SupplyParameterFromQuery(Name = "estrenos")]
    public bool futurosEstrenos { get; set; } = false;

    [Parameter]
    [SupplyParameterFromQuery]
    public bool enCartelera { get; set; } = false;

    [Parameter]
    [SupplyParameterFromQuery]
    public bool masVotadas { get; set; } = false;

    private List<Pelicula> peliculas = new List<Pelicula>();
    Dictionary<string, string> queryStringDict = new Dictionary<string, string>();

    [Parameter]
    [SupplyParameterFromQuery(Name = "pagina")]
    public int paginaActual { get; set; } = 1;

    private int paginasTotales;

    protected override async Task OnInitializedAsync()
    {
        if(paginaActual == 0)
        {
            paginaActual = 1;
        }

        await ObtenerGeneros();
        var queriStrings = GenerarQueryStrings();
        await RealizarBusqueda(queriStrings);
    }

    private async Task PaginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await CargarNuevasPeliculas();
    }

    private async Task ObtenerGeneros()
    {
        var respuestaHttp = await repositorio.Get<List<Genero>>("api/generos");
        generos = respuestaHttp.Response!;
    }

    private async Task TituloKeyPress(KeyboardEventArgs e)
    {
        if(e.Key == "Enter")
        {
            await CargarNuevasPeliculas();
        }
    }

    private async Task CargarNuevasPeliculas()
    {
        var queryStrings = GenerarQueryStrings();
        navigationManager.NavigateTo("/peliculas/buscar?" + queryStrings);
        await RealizarBusqueda(queryStrings);

    }

    private async Task RealizarBusqueda(string queryStrings)
    {
        var respuestaHttp = await repositorio.Get<List<Pelicula>>($"api/peliculas/filtrar?" + queryStrings);
        paginasTotales = int.Parse(respuestaHttp.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault());
        peliculas = respuestaHttp.Response;
    }

    private string GenerarQueryStrings()
    {
        if (queryStringDict is null)
        {
            queryStringDict = new Dictionary<string, string>();
        }

        queryStringDict["generoid"] = GeneroSeleccionado.ToString();
        // si es nulo que use un string vacio
        queryStringDict["titulo"] = titulo ?? string.Empty;
        queryStringDict["encartelera"] = enCartelera.ToString();
        queryStringDict["estrenos"] = futurosEstrenos.ToString();
        queryStringDict["masvotadas"] = masVotadas.ToString();
        queryStringDict["pagina"] = paginaActual.ToString();

        //generoid=7&titulo=mohana .... asi tengo que generar el url

        var valoresPorDefecto = new List<string>() { "false", "", "0" };

        return string.Join("&", queryStringDict.Where(x => !valoresPorDefecto.Contains(x.Value.ToLower()))
                      .Select(x => $"{x.Key} = {System.Web.HttpUtility.UrlEncode(x.Value)}")
                      .ToArray());
    }

    private async Task LimparOnClick()
    {
        titulo = "";
        GeneroSeleccionado = 0;
        futurosEstrenos = false;
        enCartelera = false;
        masVotadas = false;
        await CargarNuevasPeliculas();
    }
}
