@page "/actores/editar/{ActorId:int}"
@inject NavigationManager navigationManager
@inject IRepositorio repositorio
@inject SweetAlertService swal
@attribute [Authorize(Roles = "admin")]


<h3>Editar Actor</h3>

@if (actor is null)
{
    <p>Cargando...</p>
}
else
{
    <FormularioActores actor="actor" OnValidSubmit="Editar" />
}

@code {

    [Parameter]
    public int ActorId { get; set; }

    Actor? actor;

    protected override async Task OnInitializedAsync()
    {
        //api/generos/{ActorId} = tengo que crear este end-point en el controlador
        var respuestaHTTP = await repositorio.Get<Actor>($"api/actores/{ActorId}");

        if (respuestaHTTP.Error)
        {
            if(respuestaHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("actores");
            }
            else
            {
                var mensajeError = await respuestaHTTP.ObtenerMensajeError();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            actor = respuestaHTTP.Response;
        }
    }

    private async void Editar()
    {

        var respuestaHTTP = await repositorio.Put("api/actores", actor);

        if (respuestaHTTP.Error)
        {
            var mensajeError = await respuestaHTTP.ObtenerMensajeError();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            await swal.FireAsync("Ok", "Actor modificado", SweetAlertIcon.Success);
            navigationManager.NavigateTo("actores");
        }
    }
}
